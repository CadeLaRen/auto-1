-- Initial auto.cabal generated by cabal init.  For further documentation, 
-- see http://haskell.org/cabal/users-guide/

name:                auto
version:             0.1.0.0
synopsis:            Locally stateful programming with denotational semantics.
description:         /auto/ is a Haskell DSL/library providing declarative,
                     compositional, denotative semantics for discrete-step,
                     locally stateful, interactive programs, games, and
                     automations, with implicitly derived serialization.
                     .
                     /auto/ works by providing a type that encapsulates
                     "stream transformers", or locally stateful functions; by
                     specifying your program as a (potentially cyclic) graph
                     of relationships between streams, you create a way of
                     "declaring" a system based simply on static relationships
                     between quantities.
                     .
                     Instead of a "state monad" type solution, where all
                     functions have access to a global state, /auto/ works by
                     specifying relationships which each exist independently
                     and on their own, without any global state.
                     .
                     A more fuller exposition is in the `README.md`, in this
                     project directory and also online at
                     <https://github.com/mstksg/auto/blob/master/README.md>;
                     you can get started by reading the tutorial, which is
                     also in this project directory in the `tutorial`
                     directory, and also incidentally online at
                     <https://github.com/mstksg/auto/blob/master/tutorial/tutorial.md>.
                     Also, check out the
                     <https://github.com/mstksg/auto-examples auto-examples>
                     repository on github for plenty of real-world and toy
                     examples to learn from!
                     .
                     Import 'Control.Auto' to begin!

license:             MIT
license-file:        LICENSE
author:              Justin Le
maintainer:          justin@jle.im
-- copyright:           
category:            Control
build-type:          Simple
-- extra-source-files:  
cabal-version:       >=1.10

library
  exposed-modules:     Control.Auto
                     , Control.Auto.Blip
                     , Control.Auto.Blip.Internal
                     , Control.Auto.Collection
                     , Control.Auto.Core
                     , Control.Auto.Effects
                     , Control.Auto.Generate
                     , Control.Auto.Interval
                     , Control.Auto.Process
                     , Control.Auto.Process.Random
                     , Control.Auto.Run
                     , Control.Auto.Serialize
                     , Control.Auto.Switch
                     , Control.Auto.Time
  -- other-modules:       
  -- other-extensions:    
  build-depends:       base >=4.6 && <4.8
                     , bytestring
                     , cereal
                     , containers
                     , deepseq
                     , profunctors
                     , random
                     , semigroups
                     , transformers
  hs-source-dirs:      src
  default-language:    Haskell2010
  ghc-options:         -Wall
